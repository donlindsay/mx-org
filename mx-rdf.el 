(defun mx:rdf-start (current-buffer)
  "Engage the MX-RDF subsystem."
  (interactive)
  (message "MX-RDF: ONLINE")
  (org-entry-put "MX-RS" "ONLINE")
  (setq org-global-properties '("MX-RDF" . "ONLINE")) 
  )

(defun mx:org-n3-properties
  (interactive)
  (setq org-custom-properties 
	'(("MX-RDF")
	  ("MX-SUBJX")
	  ("MX-PREDX")
	  ("MX-OBJEX")
	  ("MX-RULEZ")))
  (setq org-properties-postprocess-alist '("MX-RULEZ"
					   lambda("N3"))) )

(defconst mx-org-n3-triple '((mx-subjx     . (org-entry-get "MX-SUBJX"))
			     (mx-predx     . (org-entry-get "MX-PREDX"))
			     (mx-objex     . (org-entry-get "MX-OBJEX"))
			     (mx-rulez     . (org-entry-get "MX-RULEZ")))
  )
	

(defvar BEGIN_EXAMPLE (mx-rdf mx-rdf-property drawer)
  '((owl2-rdfs . '((doc-string  . "rdfs and owl2 markup element drawer")
                   (mx-rdf-type  . drawer))
	       )
    )
  )

(defvar END_EXAMPLE (mx-rdf mx-rdf-property drawer)
  '((owl2-rdfs . '((doc-string  . "rdfs and owl2 markup element drawer")
                   (mx-rdf-type . drawer)) ) ) )

(defvar mx-rdf-properties
  '((mx-rdf_all . mx-rdfs-type)
    (mx-rdf+    . mx-n3-predicate)
    (mx-rdf+    . mx-rdf-type)
    )
  )
; schema
(scm-cls   .'(org-entry-put (point) "SCM"
(scm-sco   .'(org-entry-put (point) "SCM"
(scm-eqc1  .'(org-entry-put (point) "SCM"
(scm-eqc2  .'(org-entry-put (point) "SCM"
(scm-op    .'(org-entry-put (point) "SCM"
(scm-dp    .'(org-entry-put (point) "SCM"
(scm-spo   . '(org-entry-put (point) "SCM"
(scm-eqp1  . '(org-entry-put (point) "SCM"
(scm-eqp2  .'(org-entry-put (point) "SCM"
(scm-dom1  .'(org-entry-put (point) "SCM"
(scm-dom2  .'(org-entry-put (point) "SCM"
(scm-rng1  .'(org-entry-put (point) "SCM"
(scm-rng2  .'(org-entry-put (point) "SCM"
(scm-hv    .'(org-entry-put (point) "SCM"
(scm-svf1  . '(org-entry-put (point) "SCM"
(scm-svf2  .'(org-entry-put (point) "SCM"
(scm-avf1  .'(org-entry-put (point) "SCM"
(scm-avf2  .'(org-entry-put (point) "SCM"
(scm-int   .'(org-entry-put (point) "SCM"
(scm-uni   .  '(org-entry-put (point) "SCM"
(defun  or elisp via org-file-properties
   
     "You can set buffer-local values for the same purpose in the variable
     `org-file-properties' this by adding lines like
   
     (defvar PROPERTY: NAME VALUE"

org-entry-put-multivalued-property pom property &rest values


(defun  determine the significance of (:how) (:what) and (seq (:how :much))
;(defun  TODO do i want a (defvar property: list of all owl2 and rdfs? 

(defun mx:send-org-markup
  (org-entry-put '(defvar mx-org-property 'mx-rdf_all
		    '("mx-org-property-value" "mx-n3-triple"))
		 (org-entry-put-multivalued-property (point) 
						     '((mx-org-property 'mx-rdf+ '(mx-predx))
						       )
						     )
		 (org-entry-put-multivalued-property (point)
						     '((mx-org-property
						     'mx-predx
						     '(rdfs-type)))
						     )


	










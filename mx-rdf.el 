(defun mx:rdf-start (current-buffer)
  "Engage the MX-RDF subsystem."
  (interactive)
  (message "MX-RDF: ONLINE")
  (org-entry-put "MX-RS" "ONLINE")
  (setq org-global-properties '("MX-RDF" . "ONLINE")) 
  )

(defun mx:org-n3-properties
  (interactive)
  (setq org-custom-properties 
	'(("MX-RDF")
	  ("MX-SUBX")
	  ("MX-PRDY")
	  ("MX-OBJZ")
	  ("MX-RULE")))
  (setq org-properties-postprocess-alist '("MX-RULE"
	  				   lambda("TTL")
					   )
	)
								)

(defconst mx-org-n3-triple '((mx-subx     . (org-entry-get "MX-SUBX"))
			     (mx-prdy     . (org-entry-get "MX-PRDY"))
			     (mx-objz     . (org-entry-get "MX-OBJZ"))
			     (mx-rule     . (org-entry-get "MX-RULE"))
			     )
  )


(setq mx:beg-ex 
      '((mx-rdf mx-rdf-property drawer)
	((owl2-rdfs . '((doc-string  . "rdfs and owl2 markup element drawer")
			(mx-rdf-type  . drawer))
		    )
	 )
	)
      )

(setq mx:end-ex 
      '((mx-rdf mx-rdf-property drawer)
	((owl2-rdfs . '((doc-string  . "rdfs and owl2 markup element drawer")
			(mx-rdf-type . drawer)
			)
		    )
	 )
	)
      )

(defvar mx-rdf-properties
  '((mx-rdf_all . mx-rdfs-type)
    (mx-rdf+    . mx-n3-predicate)
    (mx-rdf+    . mx-rdf-type)
    )
  )

(defvar scm-axioms
  '((scm-cls   . '(org-entry-put (point) "MX-RULE" "SCM-CLS"))
    (scm-sco   . '(org-entry-put (point) "MX-RULE" "SCM-SCO"))
    (scm-eqc1  . '(org-entry-put (point) "MX-RULE" "SCM-EQC1"))
    (scm-eqc2  . '(org-entry-put (point) "MX-RULE" "SCM-EQC2"))
    (scm-op    . '(org-entry-put (point) "MX-RULE" "SCM-OP"))
    (scm-dp    . '(org-entry-put (point) "MX-RULE" "SCM-DP"))
    (scm-spo   . '(org-entry-put (point) "MX-RULE" "SCM-SPO"))
    (scm-eqp1  . '(org-entry-put (point) "MX-RULE" "SCM-EQP1"))
    (scm-eqp2  . '(org-entry-put (point) "MX-RULE" "SCM-EQP2"))
    (scm-dom1  . '(org-entry-put (point) "MX-RULE" "SCM-DOM1"))
    (scm-dom2  . '(org-entry-put (point) "MX-RULE" "SCM-DOM2"))
    (scm-rng1  . '(org-entry-put (point) "MX-RULE" "SCM-RNG1"))
    (scm-rng2  . '(org-entry-put (point) "MX-RULE" "SCM-RNG2"))
    (scm-hv    . '(org-entry-put (point) "MX-RULE" "SCM-HV"))
    (scm-svf1  . '(org-entry-put (point) "MX-RULE" "SCM-SVF1"))
    (scm-svf2  . '(org-entry-put (point) "MX-RULE" "SCM-SVF2"))
    (scm-avf1  . '(org-entry-put (point) "MX-RULE" "SCM-AVF1"))
    (scm-avf2  . '(org-entry-put (point) "MX-RULE" "SCM-AVF2"))
    (scm-int   . '(org-entry-put (point) "MX-RULE" "SCM-INT"))
    (scm-uni   . '(org-entry-put (point) "MX-RULE" "SCM-UNI"))
    )
  )

(defun mx:put-multivalue ()
  "org-entry-put-multivalued-property pom property &rest values"
  (interactive)
  (message "Set multivalued property")
  


	










#+name: Semantics-of-Equality 
eq-ref 	T(?s, ?p, ?o)
	T(?s, owl:sameAs, ?s)
T(?p, owl:sameAs, ?p)
T(?o, owl:sameAs, ?o)
eq-sym 	T(?x, owl:sameAs, ?y) 	T(?y, owl:sameAs, ?x)
eq-trans 	T(?x, owl:sameAs, ?y)
T(?y, owl:sameAs, ?z) 	T(?x, owl:sameAs, ?z)
eq-rep-s 	T(?s, owl:sameAs, ?s')
T(?s, ?p, ?o)
	T(?s', ?p, ?o)
eq-rep-p 	T(?p, owl:sameAs, ?p')
T(?s, ?p, ?o)
	T(?s, ?p', ?o)
eq-rep-o 	T(?o, owl:sameAs, ?o')
T(?s, ?p, ?o)
	T(?s, ?p, ?o')
eq-diff1 	T(?x, owl:sameAs, ?y)
T(?x, owl:differentFrom, ?y)
	false
eq-diff2 	T(?x, rdf:type, owl:AllDifferent)
T(?x, owl:members, ?y)
LIST[?y, ?z_1 , ..., ?z_n ]
T(?z_i , owl:sameAs, ?z_j ) 	false 	for each 1 ≤ i < j ≤ n
eq-diff3 	T(?x, rdf:type, owl:AllDifferent)
T(?x, owl:distinctMembers, ?y)
LIST[?y, ?z_1 , ..., ?z_n ]
T(?z_i , owl:sameAs, ?z_j ) 	false 	for each 1 ≤ i < j ≤ n


#+begin_src emacs-lisp
; equivalence
(setq mx-eq-axioms '(
		     (eq-ref   . '(org-entry-put (point) "EQX" "ref"))
		     (eq-sym   . '(org-entry-put (point) "EQ" "sym"))
		     (eq-trans . '(org-entry-put (point) "EQ" "trans"))
		     (eq-rep-s . '(org-entry-put (point) "EQ" "rep-s"))
		     (eq-rep-p . '(org-entry-put (point) "EQ" "rep-p"))
		     (eq-rep-o . '(org-entry-put (point) "EQ" "rep-o"))
		     (eq-diff1 . '(org-entry-put (point) "EQ" "eq-diff1"))
		     (eq-diff2 . '(org-entry-put (point) "EQ" "eq-diff2"))
		     (eq-diff3 . '(org-entry-put (point) "EQ" "eq-diff3"))
		     ))
#+end_src

#+name: Semantics-of-Axioms-about-Properties 
 	If 	then
prp-ap 		T(ap, rdf:type, owl:AnnotationProperty) 	for each built-in annotation property of OWL 2 RL
prp-dom 	T(?p, rdfs:domain, ?c)
T(?x, ?p, ?y) 	T(?x, rdf:type, ?c)
prp-rng 	T(?p, rdfs:range, ?c)
T(?x, ?p, ?y) 	T(?y, rdf:type, ?c)
prp-fp 	T(?p, rdf:type, owl:FunctionalProperty)
T(?x, ?p, ?y1)
T(?x, ?p, ?y2) 	T(?y1, owl:sameAs, ?y2)
prp-ifp 	T(?p, rdf:type, owl:InverseFunctionalProperty)
T(?x1, ?p, ?y)
T(?x2, ?p, ?y) 	T(?x1, owl:sameAs, ?x2)
prp-irp 	T(?p, rdf:type, owl:IrreflexiveProperty)
T(?x, ?p, ?x) 	false
prp-symp 	T(?p, rdf:type, owl:SymmetricProperty)
T(?x, ?p, ?y) 	T(?y, ?p, ?x)
prp-asyp 	T(?p, rdf:type, owl:AsymmetricProperty)
T(?x, ?p, ?y)
T(?y, ?p, ?x) 	false
prp-trp 	T(?p, rdf:type, owl:TransitiveProperty)
T(?x, ?p, ?y)
T(?y, ?p, ?z) 	T(?x, ?p, ?z)
prp-spo1 	T(?p1, rdfs:subPropertyOf, ?p2)
T(?x, ?p1, ?y)
	T(?x, ?p2, ?y)
prp-spo2 	T(?p, owl:propertyChainAxiom, ?x)
LIST[?x, ?p1, ..., ?pn]
T(?u1, ?p1, ?u2)
T(?u2, ?p2, ?u3)
...
T(?un, ?pn, ?un+1) 	T(?u1, ?p, ?un+1)
prp-eqp1 	T(?p1, owl:equivalentProperty, ?p2)
T(?x, ?p1, ?y) 	T(?x, ?p2, ?y)
prp-eqp2 	T(?p1, owl:equivalentProperty, ?p2)
T(?x, ?p2, ?y) 	T(?x, ?p1, ?y)
prp-pdw 	T(?p1, owl:propertyDisjointWith, ?p2)
T(?x, ?p1, ?y)
T(?x, ?p2, ?y) 	false
prp-adp 	T(?x, rdf:type, owl:AllDisjointProperties)
T(?x, owl:members, ?y)
LIST[?y, ?p1, ..., ?pn]
T(?u, ?pi, ?v)
T(?u, ?pj, ?v) 	false 	for each 1 ≤ i < j ≤ n
prp-inv1 	T(?p1, owl:inverseOf, ?p2)
T(?x, ?p1, ?y) 	T(?y, ?p2, ?x)
prp-inv2 	T(?p1, owl:inverseOf, ?p2)
T(?x, ?p2, ?y) 	T(?y, ?p1, ?x)
prp-key 	T(?c, owl:hasKey, ?u)
LIST[?u, ?p1, ..., ?pn]
T(?x, rdf:type, ?c)
T(?x, ?p1, ?z1)
...
T(?x, ?pn, ?zn)
T(?y, rdf:type, ?c)
T(?y, ?p1, ?z1)
...
T(?y, ?pn, ?zn) 	T(?x, owl:sameAs, ?y)
prp-npa1 	T(?x, owl:sourceIndividual, ?i1)
T(?x, owl:assertionProperty, ?p)
T(?x, owl:targetIndividual, ?i2)
T(?i1, ?p, ?i2) 	false
prp-npa2 	T(?x, owl:sourceIndividual, ?i)
T(?x, owl:assertionProperty, ?p)
T(?x, owl:targetValue, ?lt)
T(?i, ?p, ?lt) 	false 




#+begin_src emacs-lisp
; property
(defvar mx-assert-prp-axiom '(
		      (prp-ap    . '(org-entry-put (point) "PRP" "ap"))
		      (prp-dom   . '(org-entry-put (point) "PRP" "dom"))
		      (prp-rng   . '(org-entry-put (point) "PRP" "rng"))
		      (prp-fp    . '(org-entry-put (point) "PRP" "fp"))
		      (prp-ifp   . '(org-entry-put (point) "PRP" "ifp"))
		      (prp-irp   . '(org-entry-put (point) "PRP" "irp"))
		      (prp-symp  . '(org-entry-put (point) "PRP" "symp"))
		      (prp-asyp  . '(org-entry-put (point) "PRP" "asymp"))
		      (prp-trp   . '(org-entry-put (point) "PRP" "trp"))
		      (prp-spo1  . '(org-entry-put (point) "PRP" "spo1"))
		      (prp-spo2  . '(org-entry-put (point) "PRP" "spo2"))
		      (prp-eqp1  . '(org-entry-put (point) "PRP" "eqp1"))
		      (prp-eqp2  . '(org-entry-put (point) "PRP" "eqp2"))
		      (prp-pdw   . '(org-entry-put (point) "PRP" "pdw"))
		      (prp-adp   . '(org-entry-put (point) "PRP" "adp"))
		      (prp-inv1  . '(org-entry-put (point) "PRP" "inv1"))
		      (prp-inv2  . '(org-entry-put (point) "PRP" "inv2"))
		      (prp-key   . '(org-entry-put (point) "PRP" "key"))
		      (prp-npa1  . '(org-entry-put (point) "PRP" "npa1"))
		      (prp-npa2  . '(org-entry-put (point) "PRP" "npa2"))))
#+end_src

#+name: Semantics-of-Classes
 	If 	then
cls-thing 		T(owl:Thing, rdf:type, owl:Class)
cls-nothing1 		T(owl:Nothing, rdf:type, owl:Class)
cls-nothing2 	T(?x, rdf:type, owl:Nothing) 	false
cls-int1 	T(?c, owl:intersectionOf, ?x)
LIST[?x, ?c1, ..., ?cn]
T(?y, rdf:type, ?c1)
T(?y, rdf:type, ?c2)
...
T(?y, rdf:type, ?cn) 	T(?y, rdf:type, ?c)
cls-int2 	T(?c, owl:intersectionOf, ?x)
LIST[?x, ?c1, ..., ?cn]
T(?y, rdf:type, ?c) 	T(?y, rdf:type, ?c1)
T(?y, rdf:type, ?c2)
...
T(?y, rdf:type, ?cn)
cls-uni 	T(?c, owl:unionOf, ?x)
LIST[?x, ?c1, ..., ?cn]
T(?y, rdf:type, ?ci) 	T(?y, rdf:type, ?c) 	for each 1 ≤ i ≤ n
cls-com 	T(?c1, owl:complementOf, ?c2)
T(?x, rdf:type, ?c1)
T(?x, rdf:type, ?c2) 	false
cls-svf1 	T(?x, owl:someValuesFrom, ?y)
T(?x, owl:onProperty, ?p)
T(?u, ?p, ?v)
T(?v, rdf:type, ?y) 	T(?u, rdf:type, ?x)
cls-svf2 	T(?x, owl:someValuesFrom, owl:Thing)
T(?x, owl:onProperty, ?p)
T(?u, ?p, ?v) 	T(?u, rdf:type, ?x)
cls-avf 	T(?x, owl:allValuesFrom, ?y)
T(?x, owl:onProperty, ?p)
T(?u, rdf:type, ?x)
T(?u, ?p, ?v) 	T(?v, rdf:type, ?y)
cls-hv1 	T(?x, owl:hasValue, ?y)
T(?x, owl:onProperty, ?p)
T(?u, rdf:type, ?x) 	T(?u, ?p, ?y)
cls-hv2 	T(?x, owl:hasValue, ?y)
T(?x, owl:onProperty, ?p)
T(?u, ?p, ?y) 	T(?u, rdf:type, ?x)
cls-maxc1 	T(?x, owl:maxCardinality, "0"^^xsd:nonNegativeInteger)
T(?x, owl:onProperty, ?p)
T(?u, rdf:type, ?x)
T(?u, ?p, ?y) 	false
cls-maxc2 	T(?x, owl:maxCardinality, "1"^^xsd:nonNegativeInteger)
T(?x, owl:onProperty, ?p)
T(?u, rdf:type, ?x)
T(?u, ?p, ?y1)
T(?u, ?p, ?y2) 	T(?y1, owl:sameAs, ?y2)
cls-maxqc1 	T(?x, owl:maxQualifiedCardinality, "0"^^xsd:nonNegativeInteger)
T(?x, owl:onProperty, ?p)
T(?x, owl:onClass, ?c)
T(?u, rdf:type, ?x)
T(?u, ?p, ?y)
T(?y, rdf:type, ?c) 	false
cls-maxqc2 	T(?x, owl:maxQualifiedCardinality, "0"^^xsd:nonNegativeInteger)
T(?x, owl:onProperty, ?p)
T(?x, owl:onClass, owl:Thing)
T(?u, rdf:type, ?x)
T(?u, ?p, ?y) 	false
cls-maxqc3 	T(?x, owl:maxQualifiedCardinality, "1"^^xsd:nonNegativeInteger)
T(?x, owl:onProperty, ?p)
T(?x, owl:onClass, ?c)
T(?u, rdf:type, ?x)
T(?u, ?p, ?y1)
T(?y1, rdf:type, ?c)
T(?u, ?p, ?y2)
T(?y2, rdf:type, ?c) 	T(?y1, owl:sameAs, ?y2)
cls-maxqc4 	T(?x, owl:maxQualifiedCardinality, "1"^^xsd:nonNegativeInteger)
T(?x, owl:onProperty, ?p)
T(?x, owl:onClass, owl:Thing)
T(?u, rdf:type, ?x)
T(?u, ?p, ?y1)
T(?u, ?p, ?y2) 	T(?y1, owl:sameAs, ?y2)
cls-oo 	T(?c, owl:oneOf, ?x)
LIST[?x, ?y1, ..., ?yn] 	T(?y1, rdf:type, ?c)
...
T(?yn, rdf:type, ?c) 
#+name: Semantics-of-Class-Axioms 
 	If 	then
cax-sco 	T(?c1, rdfs:subClassOf, ?c2)
T(?x, rdf:type, ?c1) 	T(?x, rdf:type, ?c2)
cax-eqc1 	T(?c1, owl:equivalentClass, ?c2)
T(?x, rdf:type, ?c1) 	T(?x, rdf:type, ?c2)
cax-eqc2 	T(?c1, owl:equivalentClass, ?c2)
T(?x, rdf:type, ?c2) 	T(?x, rdf:type, ?c1)
cax-dw 	T(?c1, owl:disjointWith, ?c2)
T(?x, rdf:type, ?c1)
T(?x, rdf:type, ?c2) 	false
cax-adc 	T(?x, rdf:type, owl:AllDisjointClasses)
T(?x, owl:members, ?y)
LIST[?y, ?c1, ..., ?cn]
T(?z, rdf:type, ?ci)
T(?z, rdf:type, ?cj) 	false 	for each 1 ≤ i < j ≤ n 
#+name: Semantics-of-Datatypes 
 	If 	then
dt-type1 		T(dt, rdf:type, rdfs:Datatype) 	for each datatype dt supported in OWL 2 RL
dt-type2 		T(lt, rdf:type, dt) 	for each literal lt and each datatype dt supported in OWL 2 RL
such that the data value of lt is contained in the value space of dt
dt-eq 		T(lt1, owl:sameAs, lt2) 	for all literals lt1 and lt2 with the same data value
dt-diff 		T(lt1, owl:differentFrom, lt2) 	for all literals lt1 and lt2 with different data values
dt-not-type 	T(lt, rdf:type, dt) 	false 	for each literal lt and each datatype dt supported in OWL 2 RL
such that the data value of lt is not contained in the value space of dt
#+name: Semantics-of-Schema-Vocabulary 
 	If 	then
scm-cls 	T(?c, rdf:type, owl:Class) 	T(?c, rdfs:subClassOf, ?c)
T(?c, owl:equivalentClass, ?c)
T(?c, rdfs:subClassOf, owl:Thing)
T(owl:Nothing, rdfs:subClassOf, ?c)
scm-sco 	T(?c1, rdfs:subClassOf, ?c2)
T(?c2, rdfs:subClassOf, ?c3) 	T(?c1, rdfs:subClassOf, ?c3)
scm-eqc1 	T(?c1, owl:equivalentClass, ?c2) 	T(?c1, rdfs:subClassOf, ?c2)
T(?c2, rdfs:subClassOf, ?c1)
scm-eqc2 	T(?c1, rdfs:subClassOf, ?c2)
T(?c2, rdfs:subClassOf, ?c1) 	T(?c1, owl:equivalentClass, ?c2)
scm-op 	T(?p, rdf:type, owl:ObjectProperty) 	T(?p, rdfs:subPropertyOf, ?p)
T(?p, owl:equivalentProperty, ?p)
scm-dp 	T(?p, rdf:type, owl:DatatypeProperty) 	T(?p, rdfs:subPropertyOf, ?p)
T(?p, owl:equivalentProperty, ?p)
scm-spo 	T(?p1, rdfs:subPropertyOf, ?p2)
T(?p2, rdfs:subPropertyOf, ?p3) 	T(?p1, rdfs:subPropertyOf, ?p3)
scm-eqp1 	T(?p1, owl:equivalentProperty, ?p2) 	T(?p1, rdfs:subPropertyOf, ?p2)
T(?p2, rdfs:subPropertyOf, ?p1)
scm-eqp2 	T(?p1, rdfs:subPropertyOf, ?p2)
T(?p2, rdfs:subPropertyOf, ?p1) 	T(?p1, owl:equivalentProperty, ?p2)
scm-dom1 	T(?p, rdfs:domain, ?c1)
T(?c1, rdfs:subClassOf, ?c2) 	T(?p, rdfs:domain, ?c2)
scm-dom2 	T(?p2, rdfs:domain, ?c)
T(?p1, rdfs:subPropertyOf, ?p2) 	T(?p1, rdfs:domain, ?c)
scm-rng1 	T(?p, rdfs:range, ?c1)
T(?c1, rdfs:subClassOf, ?c2) 	T(?p, rdfs:range, ?c2)
scm-rng2 	T(?p2, rdfs:range, ?c)
T(?p1, rdfs:subPropertyOf, ?p2) 	T(?p1, rdfs:range, ?c)
scm-hv 	T(?c1, owl:hasValue, ?i)
T(?c1, owl:onProperty, ?p1)
T(?c2, owl:hasValue, ?i)
T(?c2, owl:onProperty, ?p2)
T(?p1, rdfs:subPropertyOf, ?p2) 	T(?c1, rdfs:subClassOf, ?c2)
scm-svf1 	T(?c1, owl:someValuesFrom, ?y1)
T(?c1, owl:onProperty, ?p)
T(?c2, owl:someValuesFrom, ?y2)
T(?c2, owl:onProperty, ?p)
T(?y1, rdfs:subClassOf, ?y2) 	T(?c1, rdfs:subClassOf, ?c2)
scm-svf2 	T(?c1, owl:someValuesFrom, ?y)
T(?c1, owl:onProperty, ?p1)
T(?c2, owl:someValuesFrom, ?y)
T(?c2, owl:onProperty, ?p2)
T(?p1, rdfs:subPropertyOf, ?p2) 	T(?c1, rdfs:subClassOf, ?c2)
scm-avf1 	T(?c1, owl:allValuesFrom, ?y1)
T(?c1, owl:onProperty, ?p)
T(?c2, owl:allValuesFrom, ?y2)
T(?c2, owl:onProperty, ?p)
T(?y1, rdfs:subClassOf, ?y2) 	T(?c1, rdfs:subClassOf, ?c2)
scm-avf2 	T(?c1, owl:allValuesFrom, ?y)
T(?c1, owl:onProperty, ?p1)
T(?c2, owl:allValuesFrom, ?y)
T(?c2, owl:onProperty, ?p2)
T(?p1, rdfs:subPropertyOf, ?p2) 	T(?c2, rdfs:subClassOf, ?c1)
scm-int 	T(?c, owl:intersectionOf, ?x)
LIST[?x, ?c1, ..., ?cn] 	T(?c, rdfs:subClassOf, ?c1)
T(?c, rdfs:subClassOf, ?c2)
...
T(?c, rdfs:subClassOf, ?cn)
scm-uni 	T(?c, owl:unionOf, ?x)
LIST[?x, ?c1, ..., ?cn] 	T(?c1, rdfs:subClassOf, ?c)
T(?c2, rdfs:subClassOf, ?c)
...
T(?cn, rdfs:subClassOf, ?c) 
#+name: Theorem-PR1
Theorem PR1. Let R be the OWL 2 RL/RDF rules as defined above. Furthermore, let O1 and O2 be OWL 2 RL ontologies satisfying the following properties:

    neither O1 nor O2 contains a IRI that is used for more than one type of entity (i.e., no IRIs is used both as, say, a class and an individual);
    O1 does not contain SubAnnotationPropertyOf, AnnotationPropertyDomain, and AnnotationPropertyRange axioms; and
    each axiom in O2 is an assertion of the form as specified below, for a, a1, ..., an named individuals:
        ClassAssertion( C a ) where C is a class,
        ObjectPropertyAssertion( OP a1 a2 ) where OP is an object property,
        DataPropertyAssertion( DP a v ) where DP is a data property, or
        SameIndividual( a1 ... an ). 

Furthermore, let RDF(O1) and RDF(O2) be translations of O1 and O2, respectively, into RDF graphs as specified in the OWL 2 Mapping to RDF Graphs [OWL 2 RDF Mapping]; and let FO(RDF(O1)) and FO(RDF(O2)) be the translation of these graphs into first-order theories in which triples are represented using the T predicate — that is, T(s, p, o) represents an RDF triple with the subject s, predicate p, and the object o. Then, O1 entails O2 under the OWL 2 Direct Semantics [OWL 2 Direct Semantics] if and only if FO(RDF(O1)) ∪ R entails FO(RDF(O2)) under the standard first-order semantics.

Proof Sketch. Without loss of generality, it can be assumed that all axioms in O1 are fully normalized — that is, that all class expressions in the axioms are of depth at most one. Let DLP(O1) be the set of rules obtained by translating O1 into a set of rules as in Description Logic Programs [DLP].

Consider now each assertion A ∈ O2 that is entailed by DLP(O1) (or, equivalently, by O1). Let dt be a derivation tree for A from DLP(O1). By examining the set of OWL 2 RL constructs, it is possible to see that each such tree can be transformed to a derivation tree dt' for FO(RDF(A)) from FO(RDF(O1)) ∪ R. Each assertion B occurring in dt is of the form as specified in the theorem. The tree dt' can, roughly speaking, be obtained from dt by replacing each assertion B with FO(RDF(B)) and by replacing each rule from DLP(O1) with a corresponding rule from Tables 3–8. Consequently, FO(RDF(O1)) ∪ R entails FO(RDF(A)).

Since no IRI in O1 is used as both an individual and a class or a property, FO(RDF(O1)) ∪ R does not entail a triple of the form T(a:i1, owl:sameAs, a:i2) where either a:i1 or a:i2 is used in O1 as a class or a property. This allows one to transform a derivation tree for FO(RDF(A)) from FO(RDF(O1)) ∪ R to a derivation tree for A from DLP(O1) in a way that is analogous to the previous case. QED 
